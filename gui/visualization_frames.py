"""
Visualization Panel - Interactive Plotting Module
GÃ¶rselleÅŸtirme Paneli - Ä°nteraktif Ã‡izim ModÃ¼lÃ¼

This module implements the left panel containing interactive matplotlib plots
for visualizing training data, test results, and loss curves in real-time.

Bu modÃ¼l, eÄŸitim verisini, test sonuÃ§larÄ±nÄ± ve kayÄ±p eÄŸrilerini gerÃ§ek zamanlÄ±
gÃ¶rselleÅŸtirmek iÃ§in interaktif matplotlib grafikleri iÃ§eren sol paneli uygular.

Visualization Components / GÃ¶rselleÅŸtirme BileÅŸenleri:
    - Training Tab: Interactive canvas for adding data points and viewing
                   decision boundaries during training
      EÄŸitim Sekmesi: Veri noktalarÄ± eklemek ve eÄŸitim sÄ±rasÄ±nda
                      karar sÄ±nÄ±rlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in interaktif tuval

    - Test Tab: Display of model performance on test data with
               decision boundaries
      Test Sekmesi: Karar sÄ±nÄ±rlarÄ±yla test verisi Ã¼zerinde
                   model performansÄ±nÄ±n gÃ¶sterimi

    - Loss Tab: Real-time loss curve showing training progress
      KayÄ±p Sekmesi: EÄŸitim ilerlemesini gÃ¶steren gerÃ§ek zamanlÄ± kayÄ±p eÄŸrisi

Matplotlib Integration / Matplotlib Entegrasyonu:
    Uses FigureCanvasTkAgg to embed matplotlib figures in CustomTkinter GUI,
    enabling interactive plots with mouse events.

    Fare olaylarÄ±yla interaktif grafikleri etkinleÅŸtirerek, matplotlib
    figÃ¼rlerini CustomTkinter GUI'ye gÃ¶mmek iÃ§in FigureCanvasTkAgg kullanÄ±r.

Author: Developed for educational purposes
Date: 2024
"""

import customtkinter as ctk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import numpy as np


class VisualizationFrame(ctk.CTkFrame):
    """
    Visualization Frame - Interactive Plotting Component
    GÃ¶rselleÅŸtirme Ã‡erÃ§evesi - Ä°nteraktif Ã‡izim BileÅŸeni

    This class implements a tabbed interface with three visualization panels,
    each containing matplotlib plots embedded in the CustomTkinter GUI.

    Bu sÄ±nÄ±f, her biri CustomTkinter GUI'ye gÃ¶mÃ¼lÃ¼ matplotlib grafikleri
    iÃ§eren Ã¼Ã§ gÃ¶rselleÅŸtirme paneli ile sekmeli bir arayÃ¼z uygular.

    Tabs / Sekmeler:
        1. Training Tab (EÄŸitim Sekmesi):
           - Interactive 2D scatter plot for data points
             Veri noktalarÄ± iÃ§in interaktif 2D daÄŸÄ±lÄ±m grafiÄŸi
           - Mouse click to add points
             Nokta eklemek iÃ§in fare tÄ±klamasÄ±
           - Real-time decision boundary visualization
             GerÃ§ek zamanlÄ± karar sÄ±nÄ±rÄ± gÃ¶rselleÅŸtirmesi

        2. Test Tab (Test Sekmesi):
           - Display test data and model predictions
             Test verisini ve model tahminlerini gÃ¶ster
           - Decision boundaries on test set
             Test setinde karar sÄ±nÄ±rlarÄ±

        3. Loss Tab (KayÄ±p Sekmesi):
           - Line plot of loss vs. epoch
             KaybÄ±n epoch'a karÅŸÄ± Ã§izgi grafiÄŸi
           - Updated in real-time during training
             EÄŸitim sÄ±rasÄ±nda gerÃ§ek zamanlÄ± gÃ¼ncellenir

    Matplotlib Components / Matplotlib BileÅŸenleri:
        - Figure: Container for plots / Grafikler iÃ§in kap
        - Axes: Individual plot area / Bireysel grafik alanÄ±
        - Canvas: Tkinter widget for embedding / GÃ¶mmek iÃ§in Tkinter widget'Ä±

    Interactive Features / Ä°nteraktif Ã–zellikler:
        - Mouse click events on training canvas
          EÄŸitim tuvalinde fare tÄ±klama olaylarÄ±
        - Dynamic updates during training
          EÄŸitim sÄ±rasÄ±nda dinamik gÃ¼ncellemeler
        - Tab switching for different views
          FarklÄ± gÃ¶rÃ¼nÃ¼mler iÃ§in sekme geÃ§iÅŸi
    """

    def __init__(self, master, on_point_added_callback=None, **kwargs):
        """
        Initialize the Visualization Frame with matplotlib plots.
        Matplotlib grafikleriyle GÃ¶rselleÅŸtirme Ã‡erÃ§evesini baÅŸlat.

        Sets up three tabbed views with embedded matplotlib figures,
        configures mouse event handlers, and initializes plot properties.

        GÃ¶mÃ¼lÃ¼ matplotlib figÃ¼rleriyle Ã¼Ã§ sekmeli gÃ¶rÃ¼nÃ¼m kurar,
        fare olay yÃ¶neticilerini yapÄ±landÄ±rÄ±r ve grafik Ã¶zelliklerini baÅŸlatÄ±r.

        Args:
            master: Parent widget (main application)
                   Ãœst widget (ana uygulama)

            on_point_added_callback (callable, optional):
                Callback function triggered on mouse click in training plot.
                Signature: callback(x, y) where x, y are coordinates.

                EÄŸitim grafiÄŸinde fare tÄ±klamasÄ±nda tetiklenen callback fonksiyonu.
                Ä°mza: callback(x, y) burada x, y koordinatlardÄ±r.

            **kwargs: Additional arguments for CTkFrame
                     CTkFrame iÃ§in ek argÃ¼manlar
        """
        super().__init__(master, **kwargs)

        self.on_point_added_callback = on_point_added_callback
        self.loss_history = []

        # Tabbed view oluÅŸtur
        self.tabview = ctk.CTkTabview(self, width=700, height=600)
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)

        # Sekmeleri ekle
        self.tabview.add("ðŸŽ¯ EÄŸitim (Train)")
        self.tabview.add("ðŸ“Š Test")
        self.tabview.add("ðŸ“ˆ Hata GrafiÄŸi (Loss)")

        # Her sekme iÃ§in matplotlib figure'larÄ± oluÅŸtur
        self._setup_train_tab()
        self._setup_test_tab()
        self._setup_loss_tab()

    def _setup_train_tab(self):
        """
        Setup the training tab with interactive matplotlib canvas.
        Ä°nteraktif matplotlib tuvaliyle eÄŸitim sekmesini kur.

        Creates a matplotlib figure with mouse click event handling
        for adding data points interactively.

        Ä°nteraktif olarak veri noktalarÄ± eklemek iÃ§in fare tÄ±klama
        olay iÅŸlemeyle bir matplotlib figÃ¼rÃ¼ oluÅŸturur.
        """
        tab = self.tabview.tab("ðŸŽ¯ EÄŸitim (Train)")

        # Matplotlib figure
        self.train_fig = Figure(figsize=(7, 6), dpi=100)
        self.train_ax = self.train_fig.add_subplot(111)
        self.train_ax.set_xlim(-1, 11)
        self.train_ax.set_ylim(-1, 11)
        self.train_ax.set_xlabel('X')
        self.train_ax.set_ylabel('Y')
        self.train_ax.set_title('EÄŸitim Verisi - Fare ile Nokta Ekleyin')
        self.train_ax.grid(True, alpha=0.3)

        # Canvas
        self.train_canvas = FigureCanvasTkAgg(self.train_fig, tab)
        self.train_canvas.draw()
        self.train_canvas.get_tk_widget().pack(fill="both", expand=True)

        # Fare tÄ±klama olayÄ±nÄ± baÄŸla
        self.train_canvas.mpl_connect('button_press_event', self._on_train_click)

    def _setup_test_tab(self):
        """
        Setup the test tab with matplotlib plot.
        Matplotlib grafiÄŸiyle test sekmesini kur.
        """
        tab = self.tabview.tab("ðŸ“Š Test")

        # Matplotlib figure
        self.test_fig = Figure(figsize=(7, 6), dpi=100)
        self.test_ax = self.test_fig.add_subplot(111)
        self.test_ax.set_xlim(-1, 11)
        self.test_ax.set_ylim(-1, 11)
        self.test_ax.set_xlabel('X')
        self.test_ax.set_ylabel('Y')
        self.test_ax.set_title('Test Verisi ve Model PerformansÄ±')
        self.test_ax.grid(True, alpha=0.3)

        # Canvas
        self.test_canvas = FigureCanvasTkAgg(self.test_fig, tab)
        self.test_canvas.draw()
        self.test_canvas.get_tk_widget().pack(fill="both", expand=True)

    def _setup_loss_tab(self):
        """
        Setup the loss tab with matplotlib plot.
        Matplotlib grafiÄŸiyle kayÄ±p sekmesini kur.
        """
        tab = self.tabview.tab("ðŸ“ˆ Hata GrafiÄŸi (Loss)")

        # Matplotlib figure
        self.loss_fig = Figure(figsize=(7, 6), dpi=100)
        self.loss_ax = self.loss_fig.add_subplot(111)
        self.loss_ax.set_xlabel('Epoch')
        self.loss_ax.set_ylabel('Loss')
        self.loss_ax.set_title('EÄŸitim SÄ±rasÄ±nda Loss DeÄŸiÅŸimi')
        self.loss_ax.grid(True, alpha=0.3)

        # Canvas
        self.loss_canvas = FigureCanvasTkAgg(self.loss_fig, tab)
        self.loss_canvas.draw()
        self.loss_canvas.get_tk_widget().pack(fill="both", expand=True)

    def _on_train_click(self, event):
        """
        Handle mouse click events on the training plot.
        EÄŸitim grafiÄŸindeki fare tÄ±klama olaylarÄ±nÄ± iÅŸle.

        This method is called when the user clicks on the training canvas.
        It extracts coordinates and triggers the callback to add a data point.

        Bu metod, kullanÄ±cÄ± eÄŸitim tuvaline tÄ±kladÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lÄ±r.
        KoordinatlarÄ± Ã§Ä±karÄ±r ve bir veri noktasÄ± eklemek iÃ§in callback'i tetikler.

        Args:
            event (matplotlib.backend_bases.MouseEvent):
                Mouse event containing click coordinates and plot information
                TÄ±klama koordinatlarÄ±nÄ± ve grafik bilgilerini iÃ§eren fare olayÄ±
        """
        # TÄ±klama grafiÄŸin iÃ§indeyse
        if event.inaxes == self.train_ax and event.xdata and event.ydata:
            x, y = event.xdata, event.ydata

            # Callback'i Ã§aÄŸÄ±r
            if self.on_point_added_callback:
                self.on_point_added_callback(x, y)

    def plot_data_points(self, data_handler, ax=None):
        """
        Plot data points on the given axes.
        Veri noktalarÄ±nÄ± verilen eksenlerde Ã§iz.

        Args:
            data_handler: DataHandler instance
            ax: Matplotlib axes (None ise train_ax kullanÄ±lÄ±r)
        """
        if ax is None:
            ax = self.train_ax

        # Her sÄ±nÄ±f iÃ§in
        for class_id in range(data_handler.get_num_classes()):
            points = data_handler.get_data_by_class(class_id)
            if len(points) > 0:
                color = data_handler.get_color(class_id)
                ax.scatter(points[:, 0], points[:, 1],
                          c=color, s=100, alpha=0.7,
                          edgecolors='black', linewidth=1.5,
                          label=data_handler.classes[class_id])

        # Legend ekle
        if data_handler.get_num_classes() > 0:
            ax.legend(loc='upper right')

    def update_train_view(self, data_handler):
        """
        Update the training view with new data.
        EÄŸitim gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ yeni verilerle gÃ¼ncelle.

        Args:
            data_handler: DataHandler instance
        """
        self.train_ax.clear()
        self.train_ax.set_xlim(-1, 11)
        self.train_ax.set_ylim(-1, 11)
        self.train_ax.set_xlabel('X')
        self.train_ax.set_ylabel('Y')
        self.train_ax.set_title('EÄŸitim Verisi - Fare ile Nokta Ekleyin')
        self.train_ax.grid(True, alpha=0.3)

        # Veri noktalarÄ±nÄ± Ã§iz
        self.plot_data_points(data_handler, self.train_ax)

        self.train_canvas.draw()

    def update_decision_boundary(self, model, X, y, data_handler, tab_name='train'):
        """
        Update decision boundary visualization using trained model.
        EÄŸitilmiÅŸ model kullanarak karar sÄ±nÄ±rÄ± gÃ¶rselleÅŸtirmesini gÃ¼ncelle.

        This method creates a dense grid of points, predicts their classes,
        and visualizes the decision regions using contour plots.

        Bu metod, yoÄŸun bir nokta Ä±zgarasÄ± oluÅŸturur, sÄ±nÄ±flarÄ±nÄ± tahmin eder
        ve kontur grafikleri kullanarak karar bÃ¶lgelerini gÃ¶rselleÅŸtirir.

        Algorithm / Algoritma:
            1. Create meshgrid covering the plot area
               Grafik alanÄ±nÄ± kaplayan meshgrid oluÅŸtur
            2. Predict class for each grid point
               Her Ä±zgara noktasÄ± iÃ§in sÄ±nÄ±fÄ± tahmin et
            3. Draw filled contours for decision regions
               Karar bÃ¶lgeleri iÃ§in dolu konturlar Ã§iz
            4. Overlay actual data points
               GerÃ§ek veri noktalarÄ±nÄ± Ã¼st Ã¼ste bindir

        Args:
            model: Trained model with predict() method
                  predict() metodu olan eÄŸitilmiÅŸ model

            X (np.ndarray): Data points to display, shape (n_samples, 2)
                           GÃ¶sterilecek veri noktalarÄ±, boyut (n_samples, 2)

            y (np.ndarray): True labels, shape (n_samples,)
                           GerÃ§ek etiketler, boyut (n_samples,)

            data_handler (DataHandler): Data handler for colors and classes
                                       Renkler ve sÄ±nÄ±flar iÃ§in veri yÃ¶neticisi

            tab_name (str): 'train' or 'test' to select which plot to update
                           Hangi grafiÄŸin gÃ¼ncelleneceÄŸini seÃ§mek iÃ§in 'train' veya 'test'
        """
        # Hangi ax kullanÄ±lacak?
        if tab_name == 'train':
            ax = self.train_ax
            canvas = self.train_canvas
            title = 'EÄŸitim Verisi - Karar SÄ±nÄ±rlarÄ±'
        else:
            ax = self.test_ax
            canvas = self.test_canvas
            title = 'Test Verisi - Model PerformansÄ±'
        
        ax.clear()
        
        # Meshgrid oluÅŸtur
        x_min, x_max = -1, 11
        y_min, y_max = -1, 11
        h = 0.1  # Grid resolution
        xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                            np.arange(y_min, y_max, h))
        
        # Tahminler
        Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
        Z = Z.reshape(xx.shape)
        
        # Karar sÄ±nÄ±rlarÄ±nÄ± Ã§iz (contourf)
        n_classes = data_handler.get_num_classes()
        colors = [data_handler.get_color(i) for i in range(n_classes)]
        ax.contourf(xx, yy, Z, alpha=0.3, levels=np.arange(n_classes + 1) - 0.5,
                   colors=colors)
        
        # Veri noktalarÄ±nÄ± Ã§iz
        if len(X) > 0:
            for class_id in range(n_classes):
                mask = y == class_id
                if np.any(mask):
                    color = data_handler.get_color(class_id)
                    ax.scatter(X[mask, 0], X[mask, 1],
                             c=color, s=100, alpha=0.8,
                             edgecolors='black', linewidth=1.5,
                             label=data_handler.classes[class_id])
        
        ax.set_xlim(x_min, x_max)
        ax.set_ylim(y_min, y_max)
        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_title(title)
        ax.grid(True, alpha=0.3)
        
        if n_classes > 0:
            ax.legend(loc='upper right')
        
        canvas.draw()
    
    def update_loss_plot(self, epoch, loss):
        """
        Update the loss plot with new training progress.
        Yeni eÄŸitim ilerlemesiyle kayÄ±p grafiÄŸini gÃ¼ncelle.
        
        Adds a new data point to the loss history and redraws the plot.
        This provides real-time feedback on training convergence.
        
        KayÄ±p geÃ§miÅŸine yeni bir veri noktasÄ± ekler ve grafiÄŸi yeniden Ã§izer.
        Bu, eÄŸitim yakÄ±nsamasÄ± hakkÄ±nda gerÃ§ek zamanlÄ± geri bildirim saÄŸlar.
        
        Args:
            epoch (int): Current epoch number / Mevcut epoch numarasÄ±
            loss (float): Loss value at this epoch / Bu epoch'taki kayÄ±p deÄŸeri
        """
        # Add new data point to history
        # GeÃ§miÅŸe yeni veri noktasÄ± ekle
        self.loss_history.append((epoch, loss))
        
        # Clear and redraw plot
        # GrafiÄŸi temizle ve yeniden Ã§iz
        self.loss_ax.clear()
        
        if len(self.loss_history) > 0:
            # Unpack epochs and losses from history
            # GeÃ§miÅŸten epoch'larÄ± ve kayÄ±plarÄ± Ã§Ä±kar
            epochs, losses = zip(*self.loss_history)
            
            # Plot loss curve with blue line and markers
            # Mavi Ã§izgi ve iÅŸaretleyicilerle kayÄ±p eÄŸrisini Ã§iz
            self.loss_ax.plot(epochs, losses, 'b-', linewidth=2, marker='o', markersize=4)
            self.loss_ax.set_xlabel('Epoch')
            self.loss_ax.set_ylabel('Loss')
            self.loss_ax.set_title('Training Loss Over Time / EÄŸitim SÄ±rasÄ±nda Loss DeÄŸiÅŸimi')
            self.loss_ax.grid(True, alpha=0.3)
        
        # Refresh canvas to display changes
        # DeÄŸiÅŸiklikleri gÃ¶stermek iÃ§in tuvali yenile
        self.loss_canvas.draw()
    
    def clear_loss_history(self):
        """
        Clear the loss history and reset the plot.
        KayÄ±p geÃ§miÅŸini temizle ve grafiÄŸi sÄ±fÄ±rla.
        
        Called when starting a new training session to remove
        old loss data from previous runs.
        
        Ã–nceki Ã§alÄ±ÅŸmalardan eski kayÄ±p verisini kaldÄ±rmak iÃ§in
        yeni bir eÄŸitim oturumu baÅŸlatÄ±rken Ã§aÄŸrÄ±lÄ±r.
        """
        self.loss_history = []
        self.loss_ax.clear()
        self.loss_ax.set_xlabel('Epoch')
        self.loss_ax.set_ylabel('Loss')
        self.loss_ax.set_title('EÄŸitim SÄ±rasÄ±nda Loss DeÄŸiÅŸimi')
        self.loss_ax.grid(True, alpha=0.3)
        self.loss_canvas.draw()
    
    def switch_to_tab(self, tab_name):
        """
        Programmatically switch to a specific tab.
        Belirtilen sekmeye programatÄ±k olarak geÃ§iÅŸ yap.
        
        Used to automatically switch to relevant tabs (e.g., test tab
        after training completes).
        
        Ä°lgili sekmelere otomatik olarak geÃ§iÅŸ yapmak iÃ§in kullanÄ±lÄ±r
        (Ã¶rneÄŸin, eÄŸitim tamamlandÄ±ktan sonra test sekmesine).
        
        Args:
            tab_name (str): Tab identifier: 'train', 'test', or 'loss'
                           Sekme tanÄ±mlayÄ±cÄ±sÄ±: 'train', 'test' veya 'loss'
        """
        # Map simple identifiers to full tab names with emojis
        # Basit tanÄ±mlayÄ±cÄ±larÄ± emoji'li tam sekme adlarÄ±na eÅŸle
        tab_mapping = {
            'train': "ðŸŽ¯ EÄŸitim (Train)",
            'test': "ðŸ“Š Test",
            'loss': "ðŸ“ˆ Hata GrafiÄŸi (Loss)"
        }
        
        # Switch to tab if valid identifier provided
        # GeÃ§erli tanÄ±mlayÄ±cÄ± saÄŸlanÄ±rsa sekmeye geÃ§
        if tab_name in tab_mapping:
            self.tabview.set(tab_mapping[tab_name])
